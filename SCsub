import subprocess
import os
from os.path import abspath, dirname

Import("env")

thirdparty_obj = []

current_dir = os.getcwd()
opentelemetry_folder = os.path.join(current_dir, "thirdparty/opentelemetry-cpp")
build_dir = os.path.join(opentelemetry_folder, "build")
suffix = ".a"
env_opentelemetry = env.Clone()

if env.msvc:
    env_opentelemetry.Append(CPPDEFINES=["_SILENCE_CXX17_C_HEADER_DEPRECATION_WARNING"])
    suffix = ".lib"

# Build opentelemetry-cpp if not already built
if not os.path.exists(os.path.join(build_dir, f"libopentelemetry_api{suffix}")):
    os.makedirs(build_dir, exist_ok=True)
    os.chdir(build_dir)
    cmake_cmd = [
        "cmake",
        "..",
        "-DBUILD_SHARED_LIBS=OFF",
        "-DBUILD_TESTING=OFF",
        "-DWITH_OTLP=ON",
        "-DWITH_OTLP_GRPC=ON",
        "-DCMAKE_BUILD_TYPE=Release",
    ]
    subprocess.run(cmake_cmd, check=True)
    subprocess.run(["cmake", "--build", ".", "--config", "Release"], check=True)
    os.chdir(current_dir)

# Link the libraries
libs_to_link = [
    os.path.join(build_dir, "sdk/src/common/libopentelemetry_common.a"),
    os.path.join(build_dir, "sdk/src/resource/libopentelemetry_resources.a"),
    os.path.join(build_dir, "sdk/src/trace/libopentelemetry_trace.a"),
    os.path.join(build_dir, "sdk/src/metrics/libopentelemetry_metrics.a"),
    os.path.join(build_dir, "sdk/src/logs/libopentelemetry_logs.a"),
    os.path.join(build_dir, "sdk/src/version/libopentelemetry_version.a"),
    os.path.join(build_dir, "exporters/otlp/libopentelemetry_otlp_recordable.a"),
    os.path.join(build_dir, "exporters/otlp/libopentelemetry_exporter_otlp_grpc_client.a"),
    os.path.join(build_dir, "exporters/otlp/libopentelemetry_exporter_otlp_grpc.a"),
    os.path.join(build_dir, "exporters/otlp/libopentelemetry_exporter_otlp_grpc_log.a"),
    os.path.join(build_dir, "exporters/otlp/libopentelemetry_exporter_otlp_grpc_metrics.a"),
    os.path.join(build_dir, "libopentelemetry_proto.a"),
    os.path.join(build_dir, "libopentelemetry_proto_grpc.a"),
]

for lib in libs_to_link:
    if os.path.exists(lib):
        env.Append(LIBS=[env.File(lib)])

# Add include paths
env.Append(CPPPATH=[os.path.join(opentelemetry_folder, "api/include")])
env.Append(CPPPATH=[os.path.join(opentelemetry_folder, "sdk/include")])
env.Append(CPPPATH=[os.path.join(opentelemetry_folder, "exporters/otlp/include")])
env.Append(CPPPATH=[os.path.join(opentelemetry_folder, "third_party/nlohmann-json/include")])
env.Append(CPPPATH=[os.path.join(build_dir, "generated/third_party/opentelemetry-proto")])

if env["platform"] == "macos" or env["platform"] == "linuxbsd":
    env.Append(LIBS=["resolv"])

env_opentelemetry.add_source_files(env.modules_sources, "*.cpp")

module_obj = []
env_opentelemetry.add_source_files(module_obj, "*.cpp")
env_opentelemetry.modules_sources += module_obj

env.Depends(module_obj, thirdparty_obj)
